{"version":3,"sources":["logo.svg","Card.jsx","Sdata.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","imgsrc","alt","sname","href","link","target","Sdata","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,0GCmB5BC,MAjBf,SAAeC,GACX,OACI,yBAAKC,UAAU,SACd,yBAAKA,UAAU,QACX,yBAAKC,IAAKF,EAAMG,OAAQC,IAAI,QAAQH,UAAU,cAC9C,yBAAKA,UAAU,cACX,0BAAMA,UAAU,kBAAhB,0BACA,wBAAIA,UAAU,eAAeD,EAAMK,OACnC,uBAAGC,KAAMN,EAAMO,KAAMC,OAAO,UAC1B,oDCmBJC,EA9BD,CACV,CACCJ,MAAM,OACNF,OAAO,2GACPO,MAAM,0BACNH,KAAK,6CAEN,CAACF,MAAM,aACPF,OAAO,2GACPO,MAAM,0BACNH,KAAK,6CAGL,CAACF,MAAM,UACPF,OAAO,kIACPO,MAAM,0BACNH,KAAK,8HAEN,CAACF,MAAM,kBACPF,OAAO,0EACPO,MAAM,0BACNH,KAAK,6CAEN,CAACF,MAAM,kBACPF,OAAO,6GACPO,MAAM,0BACNH,KAAK,8CCyBQI,MA5Cf,WACE,OACE,oCACA,wBAAIV,UAAU,iBAAd,wCAEC,kBAAC,EAAD,CACCE,OAAQM,EAAM,GAAGN,OACjBO,MAAOD,EAAM,GAAGC,MAChBL,MAAOI,EAAM,GAAGJ,MAChBE,KAAME,EAAM,GAAGF,OAGhB,kBAAC,EAAD,CACEJ,OAAQM,EAAM,GAAGN,OAClBO,MAAOD,EAAM,GAAGC,MAChBL,MAAOI,EAAM,GAAGJ,MAChBE,KAAME,EAAM,GAAGF,OAGhB,kBAAC,EAAD,CACCJ,OAAQM,EAAM,GAAGN,OACjBO,MAAOD,EAAM,GAAGC,MAChBL,MAAOI,EAAM,GAAGJ,MAChBE,KAAME,EAAM,GAAGF,OAGhB,kBAAC,EAAD,CACEJ,OAAQM,EAAM,GAAGN,OAClBO,MAAOD,EAAM,GAAGC,MAChBL,MAAOI,EAAM,GAAGJ,MAChBE,KAAME,EAAM,GAAGF,OAGhB,kBAAC,EAAD,CACEJ,OAAQM,EAAM,GAAGN,OAClBO,MAAOD,EAAM,GAAGC,MAChBL,MAAOI,EAAM,GAAGJ,MAChBE,KAAME,EAAM,GAAGF,SChCDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.829a8b8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Card (props){\n    return(\n        <div className=\"cards\">\n         <div className=\"card\">\n             <img src={props.imgsrc} alt=\"myPic\" className=\"card__img\"/>\n             <div className=\"card__info\">\n                 <span className=\"card__category\">Netflix orginal Series</span>\n                 <h3 className=\"card__title\">{props.sname}</h3>\n                 <a href={props.link} target=\"_blank\">\n                   <button> Watch Now </button>\n                 </a>\n             </div>\n         </div>\n        </div>\n    )\n}\n\nexport default Card;","const Sdata = [\n    {\n     sname:\"DARK\",\n     imgsrc:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRiAci3ZPn4Pu1BEqPsObJfMb_G02aJ_tzPxaGEmvEuAZ32LiwK\",\n     title:\"Netflix Original Series\",\n     link:\"https://www.netflix.com/in/title/80100172\"\n    }, \n    {sname:\"EXTRACTION\",\n    imgsrc:\"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRELEr5bWH1Z9ZlYjofDbRoW0ToFJop6YlcJuVU8lAYt2peph_n\",\n    title:\"Netflix Original Series\",\n    link:\"https://www.netflix.com/in/title/80230399\"\n   },\n\n    {sname:\"FRIENDS\",\n    imgsrc:\"https://s3.ap-southeast-1.amazonaws.com/images.deccanchronicle.com/dc-Cover-lmkhlh54bt5ga5ie76c2hod367-20180101150520.Medi.jpeg\",\n    title:\"Netflix Original Series\",\n    link:\"https://www.netflix.com/in/title/70153404#:~:text=This%20hit%20sitcom%20follows%20the,and%20love%20in%201990s%20Manhattan.\"\n   },\n   {sname:\"EXTRA CURICULAR\",\n   imgsrc:\"https://upload.wikimedia.org/wikipedia/en/9/9a/Extracurricular_2020.jpg\",\n   title:\"Netflix Original Series\",\n   link:\"https://www.netflix.com/in/title/80990668\"\n  },\n  {sname:\"STRANGER THINGS\",\n  imgsrc:\"https://images-na.ssl-images-amazon.com/images/M/MV5BMjEzMDAxOTUyMV5BMl5BanBnXkFtZTgwNzAxMzYzOTE@._V1_.jpg\",\n  title:\"Netflix Original Series\",\n  link:\"https://www.netflix.com/in/title/80057281\"\n }\n\n]\nexport default Sdata;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './Card'\nimport Sdata from './Sdata'\nimport sdata from './Sdata';\n\nfunction App() {\n  return (\n    <>\n    <h1 className=\"heading_style\">List of top 5 Netflix Series in 2020</h1>\n\n     <Card \n      imgsrc={Sdata[0].imgsrc}\n      title={Sdata[0].title}\n      sname={Sdata[0].sname} \n      link={Sdata[0].link}\n      />\n\n     <Card\n       imgsrc={Sdata[1].imgsrc}\n      title={Sdata[1].title}\n      sname={Sdata[1].sname} \n      link={Sdata[1].link}\n     />\n\n     <Card\n      imgsrc={Sdata[2].imgsrc}\n      title={Sdata[2].title}\n      sname={Sdata[2].sname} \n      link={Sdata[2].link}\n     />\n\n     <Card\n       imgsrc={Sdata[3].imgsrc}\n      title={Sdata[3].title}\n      sname={Sdata[3].sname} \n      link={Sdata[3].link}\n     />\n\n     <Card\n       imgsrc={Sdata[4].imgsrc}\n      title={Sdata[4].title}\n      sname={Sdata[4].sname} \n      link={Sdata[4].link}\n     />\n    </>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n \n"],"sourceRoot":""}